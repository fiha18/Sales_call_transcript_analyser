hey folks um hey uh hey everyone good evening on this wednesday evening we are deciding on going on a low level design uh you know mock interview and today we have with us a software engineer hey adam would you like to you know say hi to the audience yeah hey everyone so my name is arun goyal i am working as a software engineer in atlanta uh before this i had completed my graduation from ddu and this has been a great opportunity where i have learnt a lot about low level design and high level and of course uh gaurav has been a really great support in helping all of us so thanks gaurav for inviting sure thank you thank you for that uh so the agenda of today is that we are going to be doing a low level design interview in which we are going to be taking a very specific question which is make my trip so this kind of an app is a booking app where you can book a ticket in a bus book a ticket in a train also and i think make my trip in general wants to handle everything end to end when it comes to your trip or your you know whether that is your business trip or your leisure trip okay uh so what we are going to do is we are going to focus on the low level design of this which means there are going to be some some components that we want to code out and we are going to be thinking uh close to how a software engineer will be doing this not necessarily how a software architect will be doing this okay so okay okay that's that's the agenda uh before we just start i would like to have a look at what kind of questions are being asked on the chat just that we have a rough idea of who our audience is and you know what is the expectation so guys there's a link on slido i mean uh in the description that's a slider link please post your questions only on the slide or link because over here the benefit is if you have the same question you can upload it and it goes on top on top of that like the slider questions stay forever while over here on chat i'll just be seeing a lot of questions fly up on top okay we can also make it interactive we can take polls on slido we can you know ask you for your opinion there so it's much better much more interactive please go there i've shared the link in the chat and also it's in the description okay so let's let's see what the questions are like okay i'll uh i'll just share my screen so that everyone can see what the questions are  okay so the first question which has the maximum number of upwards is a hotel where 10 rooms are available and you have 100 customers who have selected the room and clicked on payment at the same time how do we manage system concurrency okay so you have few rooms where a lot of people want to book and also uh there's an edge space that all of them made the payment or they clicked on payment at least at the same time how do you now you know handle this kind of a situation okay that's that's one type of question the other one which has been asked which is on top are our rooms separately reserved for mmt which is make my trip uh what do we do if guest rooms if a guest books rooms and all rooms of the category were booked offline less techy hotels data are not synced online okay okay so these are the kind of questions we're getting uh arun i think is there this question i think we can handle right now right like our rooms separately booked for uh reserved for mmd this is more like a product question right so i think uh this is something which a hotel has to see if they are booking uh something offline or somebody's coming on there in their hotel and then they are booking that room for them then they can upload it or they can update their room status right so this this will help people seeing that okay right now this room is booked and this will not create an issue afterwards okay okay so we can uh that's a that's a good point so then uh you know this is solved uh how to get started with low level design and another question which is uh pretty high very similar is how do we know which design pattern to use in lnd questions okay actually they're separate so how do you get started with lower design can you help us out here yeah sure so of course low level design is something which is important while coding uh code structure is really important right so what i would recommend is first of all start learning about few of the design patterns basic design patterns let's say singleton pattern facade pattern start using them while coding the system requirements based on the requirements go by this i follow this approach when i make a use case diagram then using the use case diagram i make a class diagram then using the class diagram i'm able to see which design pattern can be helpful and then i go for the code and i'll try to make use of the same uh flow uh while coding for make my trip also products right now okay okay and so uh i mean you work as a software engineer at large uh is it is it similar to the real world or the real world has quite a few differences um when we are developing software uh is it is it something that we do or is is this more specific to interviews no i feel this is something which we do yeah within the company also so what happens is your product manager actually comes with a set of requirements okay so this is this needs to be built right then what happens is the engineering team sits down and see if that is feasible or not then if it is feasible then how do we make sure that we write the code in the right way so that later on if somebody else also joins the team he is also able to understand and it helps in debugging also it takes a less amount of time it takes a less amount of storage also so we have to optimize on everything so uh interviews are definitely handled in slightly different manner wherein we need to write just a pseudo code or if you are able to make sure that the interviewer is understanding what i'm trying to do or what i'm trying to say then it works but uh what i feel is basics needs to be cleared and more or less there is a lot of similarity in master blues also yeah and what we do in the company so you would say that uh preparing for your interviews will have the side effect of getting you prepared for your job also or getting better at what has the side effect that it will get you prepared for your interviews also yes it definitely helps because what happens is if you can write code in the right way because as you get more and more senior in your organization let's say you become hd2 senior software engineer then you become architect so the main role of architect if you know is designing only and coding could be done uh at lower levels also but generally architect is the person who designs and of course coding can be done easily so as in when we get senior more of designing happens and less of coding and low level design is of course that's why really important for coding very interesting so this is this is something that i think as you get more and more senior it becomes more and more relevant okay there's also talk uh that you know okay we will get to this other question also that what about low level design for freshers quite a few recently we had aman uh come in and a lot of the guests that we have had talk about lower design being asked to people fresh out of college so maybe the the level of low level design questions is much lesser over there is that is that fair to assume yes so actually low level design is something if you see oops is the main concept that is being used right uh how which uh which things you need to make private which things you need to make public which function you need to have in which class if you see it this way this is a basic this looks like a basic oops question now definitely for uh somebody who is fresh out of quality we do not expect him to design as much as he can uh as a sd2 or a senior software engineer can but what we can expect is that he would be having good concepts in groups right uh definitely the requirements are less uh which we need to check in our fresh grad but yeah if he is having this great knowledge of low level design i'm pretty sure he would uh be selected in any of the company and he'll get better and better so i would recommend highly recommend low level design people should focus on low level design and this will definitely help them in competitive programming also so if i tell you what happens in a competitive programming you're given a question and then you solve it which which means you're given a requirement and then you solve it right using you make functions you make classes you choose your data structures you make sure that okay minimum time to store minimum time to retrieve less time complexity less storage the same thing happens in the company also the same thing happens in the low level design also they give you a set of requirements and then you build the code okay so this definitely helps interesting i i actually my first video in 2015 was on was actually inspired by this kind of thinking that you know github concurrency low level design was not exactly the term that i knew but i just knew that good software engineering is what we are looking for so my first seven videos were on how can you use let's say design patterns in computer programming or software engineering principles in computer programming very interesting i i don't know if i was ever able to practically use it there were a few instances when i felt wow good thing i knew this because yeah a short story personal story which uh i think there was this contest on quote chef which was you know the contest has no right or wrong answer only the best answer gets a score of one and uh the worst answer gets a score of zero so it was a it's a soft marking so in that i got a uh all india rank or i think even world rank so yeah the reason that happened is because i was using this genetic algorithm which is uh which is going to evolve and everything and i had used all the cores in the computer like there are four cores that are available on the courtship processor and i was using multithreading while nobody else till then on codec i thought of that so yeah in that way like it was the thinking was concurrency thinking of how are you going to actually make this work in parallel it's quite interesting to think of even as a competitive programmer it's a different software principle and as a computer programmer you like those kind of things awesome so yeah this is great um one final question i think before we start uh is how do we know which design pattern to use in lnd questions is this something we'll see coming up now or is it is there a particular technique or way or do you need to know them beforehand what is it like so uh my answer to this would be first of all this would come with practice the more and more situations you would see the more and more problems you will deal with the more and more idea you will get for example singleton pattern let's take this example so uh what's the use of singleton pattern why when do we use that when when we only want one occurrence to be made right so first of all getting learning or maybe knowing what what the requirement of the question is probably then we'll be able to answer that okay uh it would be wiser to use this singleton uh this design pattern but how would this uh be imbibed in you right this would come with practice or maybe looking at systems or be designing system by yourself you know designing a few patterns for example uh let's take any other example for example car parking okay uh people might not know car parking uh design in india but outside india this is a big thing because in walls there's huge parking so now if you see uh car parking only there should be only one instance of a car parking system so there we can use singleton pattern but people should try it if somebody is new to learning low level design they can try it with any design pattern and as and when they dis you know make or design it they'll learn they'll see the time complexity they'll see the space complexity they'll see why why are we using it you know so this will help so more and more systems look at more and more systems practice yourself okay so you you would suggest that try the things recognize then you'll be able to recognize the problems easier and then you'll be able to fit the solutions easier yeah okay yeah that i think is is great uh i think in general also a lot of people have the same advice that don't just read do and then see what happens okay uh kiran namiyah is saying awesome and then he's got the uh the special emoji okay uh proud to work as a sdt uh i make my trip this is working as a sd at make my trip and seeing this like the things i do okay so much just to clarify we are assuming on what are the things that might be happening you are obviously doing a much deeper level uh yeah we you know if someone says high-level design of uber or high-level design or atlassian you don't actually design or even low-level design doesn't you don't actually do it like uh this is going to be but we are going to try and some of the engineering principles that you have used are obviously really good so yeah it's a good moment okay uh okay uh i think we can start uh how to think during the lld interview i think you mentioned that uh how to handle concurrent booking scenario and there are a few other specific ones which we will wait for during the interview that we get cleared so this many of these are really interesting yeah i think we should just start with this okay um anonymous has posted this ama lld in short please explain it to me please like jump back to the earlier part of the video arun has explained what lnd is it's a it's a prerequisite to understanding this video so i would suggest you actually jump back first  okay let's then start let's go for a low level design of make my trip okay so if you are designing a booking system like even booking.com is very similar so how would you go about designing a system which is generic enough to book flights book um you know buses book uh hotels so how do you design a system like this uh and what are the key components that you'll see like yeah who are the users what's going to happen okay so uh first of all uh let's take a flight booking uh feature of make my trip right okay so if we see uh customers first of all let's talk about customers customers  should be able to see the flight for a given date source and destination right okay then customers should be able to reserve the tickets for the flight then uh so let's write it down okay okay can uh okay yeah i hope everyone is able to see so customers so if you talk about customers customers should be able to see the flights uh for a given day social destination like i said they should be able to reserve the tickets then customers should be able to see which seats are booked right and which are left customers should be able to actually cancel the reservation also then there are different types of seats also if if i'm correct uh in an airline which can be booked right then there should be yeah right yeah you can run the seat and you can have that you know an economy maybe you have business class also so yeah yeah then then admin there's of course the admin also who can add a flight to the schedule then admin can also cancel the flight like we see and then the refund is generated for all the customers right so i feel this these should be the requirements of the flight looking feature uh of the trip and i feel uh booking a hotel or booking a railway ticket are very very similar to this these are just additional features and if we can design this i feel others also could be designed on the similar lines okay so that's great you're basically booking uh i mean it's i don't even know whether you're booking an event or something but you're booking uh at a very high level concept a room like a in some layout that's what we want yeah so now that you have a set of customers um let us assume that you know adding a flight or you know adding a hotel and all that is is something that we don't want to get into too much detail on we assume that flights exist we assume that those flights have a particular layout set up by the airline only and it has been given to us and it's been set up what are the kind of things that you are looking to do with customers like what are the things exactly that they should be able to do when it comes to big data okay so uh what i call this is a use case diagram right so what we can do is we can start making the use case diagram okay you call this a use case diagram or is it is it like um use case diagram we can call it a use case diagram where we can list on all the actors actually and we can see what all the activities are right so for example let's start with a customer so let me see a customer can fetch flights for a particular date source and destination right this is one of the activity which a customer can do then the second thing is customer is able to you know reserve a ticket so reserve a ticket then the third thing is our customers should be able to see which seats are bumped and which are left right and they can cancel the reservation so cancel the reservation right then uh like like we discussed in the question uh we are having different types of seeds also so what we can do is we can make a enum wherein seeds what are the types let's say one is a regular type other one is let's say extra legroom and the third one let's say an emergency exit so these are the different types of seats so my first factor was a customer right and we also discussed about the admin right so admin should be able to add apply to the schedules and the admin should be able to cancel the flight and of course the refund will be generated for all the customers like we have seen right so so the second uh third second actor can be admin right okay so if we talk about admin admin should be able to add a flight and the second one is you cancel the flight yes sorry yeah let's uh you know this is this is very clear and this is great just to take one step customers are able to do a few things one is they're able to fetch flights for a particular date source and destination meaning i want to book it for uh you know 5th of september mumbai to new york okay now you are telling me that you give me a source you give me a destination which makes sense i mean where you're going to go yeah you know what date that also actually makes sense so this is you can reserve a ticket which means once i tell you the flights uh and if i show you a particular seating arrangement or the number of tickets left you will you you will deserve a seat i am assuming there's payment also taken care of over here yes you can also cancel conservation this is this is much more painful in real life than in code but yeah you you get some money back or even if you don't get money back at least you know you can claim that i'm not going um now okay if you have a regular seat extra leg room and emergency exit okay so these these make sense again um you have different types of seats though basically you have something on yes the front seat also uh usually is charged differently yeah okay and then now we are going into admin side uh which is which is interesting you have adding a flight and you have also added cancelling the flight so this is like it's not an air traffic control but yeah it's a proper admin yeah okay so this is our make my trip so okay okay till now i think everyone has understood in case you don't understand guys anything please feel free to uh post it on the slider link like we said at the end of this we will be looking into what the doubts are sorry please go ahead okay so uh looking at all of this these are the actors right there is one more actor which is the system itself so system would be able to fetch all the flights right since admin is able to add applied so system should be able to add that lighting to the database also so there should be one more actor if we see system and system should also be able to do a few things right okay so uh i think i don't have space here system okay what does this system do it can add a flight but if someone can't okay so basically the admin is adding but system will store all of that right right yeah it has a database i guess second is if the customer is asking for a flight from a certain date with certain source and destination the system will retrieve all that will give you only the flights which you have demanded for okay okay so this is what system would do this is interesting what your um i think what you're getting is you have a system actor who gives a certain number of apis which are basically like behaviors it gives you some things and then the user or the admin can consume those apis and uh you know yes okay they can they can do something with that data and do their behaviors in turn okay that's an interesting idea okay so you have a system a system maybe over here and what can this system do so this system can uh probably catch all the flights okay fetch flights yeah that makes sense then uh second thing is this system fixes the seat for the particular customer okay okay third one okay it cancels also yeah it cancels also and if the admin adds a flight this flight is added by the system itself into the database okay okay so the admin adds a flight and then we can do that so let's say cancel booking okay that's quite a few requirements this is i think a detailed uh booking system all we have to do if you want to book a bus is just say instead of fetch flights you do fetch buses yeah yeah for the same date source and destination again same thing same goes for fetch hotels in a particular area then a person can go and check out each and every hotel how many rooms are left how many book a particular room this very similar to how we are booking an airline we get a list of flights a person selects on the base of the budget or timing or whatever filters they want non-stop or you know few stops if they want they select the flight and then they go they select the seat then they book it okay so something like you know you're saying that these are parameters which can be added to yes okay okay that's pretty good um fine so how would you go about now what would be your next step we have identified what the requirements are yeah so if we look at this this is what  we call as a use case diagram now by looking at the use case diagram we'll build a class diagram okay let's do that in the next page okay how do i go to the next page uh i think there's this icon over here on top uh we are in three or three i should go to two out of three yes yes yes okay i'm able to write perfect okay so yes i'm able to write class diagram so yes so uh i i'll have a look at the use case diagram and using that i'll make the class diagram okay now okay so you you have the class diagram somewhere out here uh no i'll start writing i'll make the class diagram here okay okay okay so uh first of all uh like we had first is the customer and the other one is the admin okay so i'll just do this okay so now you can see what else our customers have customers can fetch a flight for a particular date source and uh they can reserve a ticket so they might have a set of tickets what is this yeah yes so a customer will definitely have a name yeah an email id or a different unique identifier let's give it simple id okay okay so it will have a id of type strings so in a class diagram we mentioned all the data members and the data functions what a actor is going to have okay so first thing is id it is a data member which it will have okay next thing can be named and of course this will also be a string the second thing could be uh email let's say i know these are metadata but this will this everyone will have right yeah so you're now going for data which is let's say uh specific to a customer you're storing state for that customer what are the variables yes and one last thing us user or a customer will always have an instance of the system because that's how he's gonna see things he's gonna see flights he's gonna uh click on a seat and then you know fix a ticket book a ticket book fix a seat actually so it will always have a system okay okay instance of system actually okay uh what are things a customer could do a customer like we discussed could fix a seat so let's give it a separator here so i believe these all could be the data members now we are going to the data functions now looking at the use case diagram if you see a customer is able to fix a seed okay yeah then he is able to cancel the booking okay right so so yes they are able to uh fix the seat which means reserve our ticket okay yes so yeah you might cancel that yeah now to fix this like how do you define which flight are you fixing a seat for do you mention the flight do you mention that i i mean if you are calling uh user fixed that means the user is known so maybe you need to pass in some parameter yes yes definitely we are going to talk about it now so now when a user is able to fix a seat how is he able to fix the ceo he will definitely have a flight selected right so what we can do is uh we will have a flight let's name it flight only and the second could be he would select a particular seat right so he would have a seat and let's give it seat only let's make we'll have to make a seat type here now okay because uh in the question it is mentioned that there are different types of seats also available right so these are things and what would it return what would be the return time these could be the parents what would be the return type now if you see you shouldn't be a boolean yeah yeah you will get a ticket and of course it would be a boolean variable that okay it is booked or not so for now uh i am taking that okay uh let's say it's just a boolean ticket is auto generated uh let's just give it a boolean that is it booked or not just for simplicity makes sense okay like a ticket id yes yes then so you're able to second this yes second thing would be a person should be able to cancel yeah so he would have a particular flight in that yeah so a param could be light okay and this i would this would also return a boolean is your flight cancelled or not if yes yes no no okay so what we're doing here we because we know that this user has only one seat on the uh in the booking it could be any number of seats it could be any number of seats but i believe uh a aircraft or a flight would have let's say 50 seats so we can go and see which all seats they are having right because a seat would be would belong to a particular user right customer so what if i you know book three seats and i want to cancel these two in that case we'll have to pass the sleeve we'll have to pass this okay fine uh we can we can assume that you are going to make a total cancellation and then you have to book uh the remaining that can also be assumed or we can just pass and seat in either case we are fine yeah right what what happens if you have to book a range of seats like i want to book from seat number 30 uh all six seats in that room so in that case uh here if you see will you get a area of seats not just uh one seat here you can see i have taken one seat but you can do it what we can do uh would you go for that or would you go for six seats six requests okay so i what we can do is in this uh let's say uh here again the same question exists uh what about concurrency if somebody has already booked the seat while i'm selecting and then going so since it involves money of people which is very critical right so what i can do is uh what what we can do is we can go first of all let's say if somebody wants to book all the consecutive seats if somebody wants like that so in that case if any of the other seat is booked let's say third number seat is already booked so what we can do is we can return false we'll first go we'll check if all these six seats are available if they're available then we'll fix that if they're not then we'll have to return false and we will want user to again select the number of seats which you want to book first case is this this totally depends on the system requirements how it makes sense that's a concurrency issue yeah yeah that becomes more uh second thing is uh what we can do is if a user wants me okay uh four of them are unbooked and two of them are already booked while i was selecting so i would select the four what i would do is i would return that okay these four are booked and you need to select two more seats other than these two seats which you selected the previous time okay so this totally depends on uh how the system wants us to behave for customers okay okay interesting yeah i think uh roughly we have seen the trade-offs of what would happen most likely you you you know you would go for one booking and the booking would have multiple seats and then if there is any sort of contention um in in the ranges of one booking and another booking then maybe you have some you know you force the the bookings to fall in the same node yeah i mean unless it's a music concert or a or a cricket match it's highly unlikely that uh hundreds of thousands of people will be trying to book the same flight like at the same section so yeah yeah you can you can go that way also makes sense okay so this is good uh the user can fix flights fixed seats yes uh reserve seats and they can also uh cancel bookings okay yes now we can talk about admin here okay so again admin uh okay let's see let's build a box right here second thing is a admin would also have a id right yes it would also have a name admin would also have a name email also it would have this would also be string and i feel he will also have a instance of the same system but the things would be different of course which will depend on let's say id or email which can depend on system admin folks can have a different set of ids they could be configured with different uh features or functionalities but they would also have a instance of system right okay okay i think these should be the data members we can move on to the data functions but looking at it what i can see is all these four are redundant redundant things right yeah so what we can do is to have a better model we can make a class user who would have all these four fields okay and this user class could be expanded by both these classes okay so this uh so i want to tell people this is how it helps you know this has made our uh things simpler class diagram while building the class diagram it makes things simpler i analyzed that okay if i make a user class and we can extend that for customer and admin okay so you have a user class which uh has a id name email system certain behaviors also i guess are uh taken care of by the user class you can log in you can register okay that's interesting one question just yeah sorry so there's a question on the chat why do we have a system attribute as part of the customer it's not being used in the class methods so should we instead i mean i understand why you have it as a way as an attribute organizer variable because you know you want to call a system and tell it that please fix the seat for me but yes if that is the case then should we have it as a variable um you know or should we have it as a like a global function which can be accessed by anybody like even in javascript uh looking at it so everyone should be able to access only there should be only one instance of the system like you are rightly said right now uh user should be a customer should be also able to access the same system n number of customers should also be able to access the same systems and the admin should also be able to access the same system right which means we only need one instance so here comes the design pattern singleton design pattern which helps us doing this okay so this is okay that's that's interesting yeah that will solve the problem uh all of them having instance to this all of them having a reference of that singleton instance is good um okay yeah as we go into the design let's see if that can be converted to a class itself right so okay we have a user we have customer we have admin uh and admins can do certain things i guess they can add a flight or delete a flight maybe we can skip that part because we are not focusing on the admin side of things we are focusing just on customers okay maybe we can try the system side of things okay so should we move on to the third page yes just to clarify whether you uh you know uh people who are watching guys uh add a flight and cancel the flight is what our admin had in terms of capabilities we are not focusing on that you can always blow up the flight i'm going to be put on the blacklist no flights for gaurav from now on system uh yeah system can do three things fetch flights fix a seat and cancel bookings right okay okay yes okay yeah okay so system so what all things would the system have what are data members can a system have first one is the list of flights which is very important okay do here so flights and what would be the type let's keep it list for now list of flight style yeah so in this case i'll have to make a class flight also which will have to decide okay then uh of course like we had discussed uh system should be able to fetch flights on the basis of source destination and date right so fetch flight should be one of the capabilities it would have a source type would be strength destination type would be string and date we can have a date type and what it will return is a list of flights again but of course this would be the filtered set of lights from this okay okay so list of flights uh then the second thing would be uh system will be able to fix the seat right so fix the seat now what it will get is an aircraft action right an aircraft yeah and of course which seat do we need to book and this will again remove the problem with concurrency what we can do is we can return a boolean what front end can do using this boolean is if the seat is booked i'll return true and front end can show the the success or you know congratulations your seat has been good and if i return false the system can show uh really sorry or whatever however the front end needs to handle that right right right yeah absolutely i mean yeah some sort of message would be useful one question which is a little interesting uh our bishop has an interesting question which i think is very very common uh instead of making an interface role and extending users you know system and admin can implement them so uh that is also important yeah they can yeah i guess system and admin know what you mean to say is customer and which can implement yeah so that can be done you can make them implemented yeah so sorry but what we can do is when do we use interface yeah when we have same function but two different people are implementing differently yes here things are separated out they will have same data members and different functionalities right yeah yeah and the thing is yeah and the behaviors are the same like the user comes and logs in right the admin also comes and logs in the user logs out the admin also logs out so many of the behaviors are the same so in this case using an interface will not be the right approach in you can make this in java specifically you can make this an abstract class or you can you know in case you're worried that user should not be created should not have a user roaming about uh but the behaviors are the same so an interface here will be in my opinion wrong you should have a class which is being extended because the behaviors the data members are the same exact same so admin is a user uh so huh okay that's a that's a good point done i'll pat myself on the back leg uh getting back to the system sorry for that uh detour third thing would be uh adding a flight right uh so when an admin adds a flight so the system adds a flight to its database right so adding a flight and what it will get is a flight right and what we can do is if that flight is successfully added in the database or not so we can return again a boolean and the fourth one is cancelling the flight so like i said admin could cancel the flight all over so what the system will do system will cancel the flight first of all and then would generate refund so right now we are not addressing refund but this is what the system does actually system itself generates a refund for all the customers so cancel the flight and it would again get and what we can do is we can give it boolean i think these all things could be done by the system like if there are a few people who are coming for the flight and it's going to be a loss-making flight better to cancel it and send the plans on some other flight yeah sure and like we had discussed previously a user was having an instance of system right so i'm not writing the functions again but a user has an instance of system class so this is how we can build the class diagram and i'm not again writing the function but user is x 10 did by customer and also again it is again extended by uh admin so these are the relations uh which i'm showing using the arrows you have like four classes till now your system and then of course when you're coding i guess you know you'll end up having many more classes because you know flight is a flight like you said and a seat is another uh class so yes uh you never know what source and destination also are like they might be locations okay right so right now we are taking source and destination was just simple strings but this could be really complex so so now we need to decide what our flight is we need to make what all things of flight would have right so let's make a class flight okay so what i thought for the flight is a flight would be on a particular date of course so it would have date okay second thing is uh a aircraft would be used for a flight ride it would go from place to place so of course there would be an aircraft of type aircraft okay then again we'll have to define aircraft okay there would be a start type of that flight there will be an end time right now what we can think is they are just of type time which is already there okay yeah some things are expected to be utility classes yeah sure then of course it will have a source which is trained and destination okay i believe a flight will always have these data members right yeah yeah hopefully it will have a destination yeah okay so uh what other function could our flight now one thing would be uh like the system was able to cancel the flight for customers right so so cancel for customer could be a data function and what it will have is a particular customer right for example a customer wants to cancel a seat for himself or a system wants to cancel the complete flight this function could be used so this will have a customer as a parameter and this will return again a boolean uh if is it cancelled successfully or there was some issue with the database or there was some issue with the functionality whatever so this could be a boolean okay okay you can you can yeah you can cancel for a customer maybe you can cancel a seat also yes so uh this is what i feel could be for the flight and now if you see system is using flight here list of lights so a system will have if you see what could be the relation here one system has so many flights and one flight can belong to this system so one is to end relationship would be formed there okay what one is to end yeah uh okay yeah that makes sense i mean every n number of lights have uh after all the system is a singleton class okay yes asking you know is uh is talking about without our permission but i understand adding flights different sources plus destination can be part of the system but why is booking a flight or cancelling a flight uh part of the system isn't that customer-centric so i think abhishek we had spoken touched on this for uh for a few minutes uh we are taking certain operations that the system exposes and then we are seeing how customers are manipulating or using that data consuming those apis exposed by the system to do things so if you think in terms of a micro service or if you think in terms of even actors they don't directly tell the system do this exactly for me the system will probably expose one api used by both admin and flight and user and so on and so forth so you have a set of core apis which are being used by the high level classes that's the idea yeah okay okay okay so i think our class diagram is pretty much set uh we have you can set uh you can cancel for customers you can also add customers i guess like add a add a seat in a flight is that so uh us a seat is always added in an aircraft actually oh so it's not like yeah okay because each uh there would be certain aircrafts which would be used right so for this flight of making a separate class aircraft and seats would belong to that class seat should so for every flight will you have a different instance of aircraft or will you have the same instance of aircraft being used for multiple flights so uh a flight could be uh if i talk in general uh suppose there's a flight going from point a to point b the system or the admin could uh you know provide it with any aircraft right so that's why i thought of making it a separate class altogether that okay there would be a separate you know and one aircraft will have a one set of seats well no my concern here is what if you have a person who books a flight uh 747 okay uh seat one a and in the next flight again it's the same 747 seat 1a has been booked now we come and we say that and the same customer has booked it okay so you say cancel for customer in a flight how do you now find out which seat to cancel okay because the seat is the same it's in the same aircraft right right so uh a flight will have a particular aircraft being used for this time so this aircraft cannot be booked for the same uh for a different flight at the same time this cannot be possible right okay okay you are starting okay okay right so now now what will happen is this that aircraft is having a few seats so suppose i want to cancel my seat for a particular flight so what my system would do it would go on the flight it would fetch the aircraft since the aircraft is able to see uh which seat belongs to me right because of course since i booked so there would be particular seat belonging to me it would see it would just cancel the cancel the seat and would generate whatever the system wants to do after that okay let me uh let me put it another way um let's say our new book seat number one on the same flight okay uh i mean you book it on a flight which is at 3 pm and i come and i say uh book one for me for that same air aircraft at 4 pm so now how do you book that seat like because you're booking it in the aircraft how do you know that seat belongs to different people at different times shouldn't you do that in the flight shouldn't you add the seat for the flight instead of adding it in the aircraft maybe the seat booking can be in the aircraft the layout can be fetched from the aircraft but you are looking for a flight not for an entire aircraft right so uh each flight would have one instance or one aircraft that is correct so if you have let's say 50 flights for the same aircraft pointing to the same aircraft that can happen right we are having one aircraft having multiple flights one aircraft having multiple flights here of course it can happen but it would at a different time at different times okay if i'm booking a seat for one a in an aircraft seat number one a for a particular aircraft there is another flight with the same aircraft and a person wants to see book seat number one a how are you going to handle that so uh so what we can do is uh this would be a separate instance with the same name same things okay okay so this is so every every flight has its own instance of aircraft you're right right okay that can be done yes yeah now if we if we talk about we have talked about aircraft is just write it yeah sure okay so the aircraft would have a set of seats right so what we can since we have different set uh different types of seats also so what we can do is we can keep a map because it will seat always have an id right so our aircraft has seats and let's give it a unique identifier let's uh give it id also okay now a aircraft is able to book a seat or fix a seat so this is one thing which aircraft can do i'm writing it here okay okay great succeed what we'll get is a seat and a customer right okay book it for this customer and this would return a boolean is it fixed or not okay okay uh second thing is uh we can add few seats in the aircraft right so add what we get is a seed right and of course getters and settles i'm imagining they are there for each and every data member okay now if you see a aircraft a flight has an instance of aircraft so let's write that relation here it has an instance of aircraft right now since we have talked about seat a lot let's write it also we need to make a c class i guess this would be the last class here so what will a sheet have it will definitely have a type uh let's give it c type we'll make our enum having the type c right it would have a id string a seat could be either be either it could be booked or not right so we can have this boolean is booked it if it is booked then it will have a customer for sure and if it's not booked the customer field would be empty so maybe uh instead of facebook we just put a customer field and if it is null then it is yes we can do that well okay this would be of type customer and of course each and every c2 will have a different price which could be given by system uh for now let's not write it okay so yeah that makes sense yeah i mean maybe the seat also doesn't want to know about that uh yeah maybe might want to know i'm not so sure maybe it doesn't wonder about it depending on the flight it changes its price makes sense so that'll be the ticket and if you see a seat belongs to a aircraft and the aircraft has could have a number of seats so again there is one too many relationship between a seat and an aircraft okay right so cool so this is great uh we have a use case diagram which was converted to a class diagram initially we talked about customers and admins and then thought of condensing them into users certain behaviors are different which is fixing a seat and cancelling a seat cancelling a booking which is different we have then moved to uh the the last part of the system which is basically the system itself uh it has a set of lights it has uh it can fetch  flights fix a seat in a flight it can also say add a flight cancel a flight you know bad weather whatever and then we have a flight itself the class you have to find it as a date when it is flying when is this flight actually happening so the probability time uh yeah so why do we have date time uh why don't okay yeah maybe easier to search okay that's a good idea so you have a start time and end time you have an aircraft which is completing this flight a source and a destination a flight can cancel for a customer a particular booking we'll see how this works out in code and an aircraft has a map of seats and uh each aircraft has an id that makes total sense also you have seats which are of a type so luxury premium private jet uh whatever yeah then you have a setup you have a customer who if they have booked that seat they own that seat maybe uh yeah maybe maybe in a flight we can have this kind of stuff like the seat but it will also give a quick search maybe okay let's see that that works uh you can fix the seat you can add a seat so you can pass it and see it over there great okay uh this looks at a high level this looks okay do you think we should jump into code now yeah uh so this class diagram would help us build the code now so what you're doing at this step i'm seeing is you are for building the class diagram you reference the use case diagram for uh building the for writing the code you are going to be referencing the uh it seems like you're not going to yeah okay yeah class diagram i would be referencing okay that makes sense so does this help you think through things better does it speed up your okay the proof will be in the pudding let's see if you can sure so what i'll do then is i'll stop sharing my screen and um do you want to share your screen or yeah okay i'll just remove this and while you get your screen set up meantime in the meanwhile let me go to slido again guys if you want to post your questions please post them here or slide off and we can take them here oh there's one with 29 uploads okay a hotel with 10 rooms are available 100 customers selected the room and click down payment at the same time how does the system manage concurrency so we are going to be handling this uh in the interview if we don't handle it then we'll let you know at the end of the interview so okay let's take this later how do we know which design pattern to use in led questions this we just answered a few minutes ago how is room availability handled when two or more third-party booking systems are trying to book the same room at the same time this is very similar to the first question so i'll just take that along with that prices keep changing every moment in make my trip it needs real-time price data from airline companies how do we design the solution for this requirement for make my trip it's not that a bigger deal because you'll have let's say 1000 uh updates per minute flight prices do change but they don't change second yeah this is not a stock price or something so uh even you don't even need web sockets actually um or you know you can poll you can directly pull the number of flight providers are booked i mean are limited how do you how do people continuously see this well in my experience if you book a flight at a particular price and it turns out that the price is increased you know what they do they just fail the booking and send you back and say do it again so it's an optimistic kind of locking very very optimistic so that's how it goes uh okay so that that is taken care of uh i'm just taking a couple of questions out of uh maybe you would like to take this one how do we handle the consistency in different data centers example booking.com may have data centers in the us and uk and many customers want to book a particular or popular hotel so uh the indians come and they say that super luxury room of 1b for my wedding please book that and the americans at the same time say the same thing that i need this room for my party like 1b so two different databases how are they going to come to a consensus or how are they going to you know give this room to just one person so uh again there would be a central database for sure which would be the hotel or the you know us there would be central data system uh database right and both of them both the third party if you see would be making call to the same database to fix it or to see if it is available or not so now this again comes to the same first question which we uh which are which we are seeing that different you know systems are going or there are more than 100 requests at the same time asking for the same room so in that case what we have to do is either the system will uh accept one of the requests like let's say uh this request comes first and let's all the for the request comes later on so what it can do is that's why we have a boolean variable as a return type if you see in every uh fixed booking or cancel booking that if a person let's say has been booked so he will show it will show a different page success page or congratulations or whatever the front end needs to handle for the success and later on let's say 99 have been filled so we need to show them that okay this is already booked this is how make my truck also handles as i've seen the system they just cancel it they just show it uh that this is uh you cannot book this go and try again and then people will have it yeah that makes total sense uh you know you have one instance of the database that can be taken care of even if you have two instances like you have one for the us and one for india and these are totally separate and both are you know uh primary databases then what you can do is uh you can accept the orders you can say very good 1b is booked by gaurav who's in india and arun also who's in uh who's in a separate city then you can call them up and say i'm so sorry um your booking went through but you know we have to cancel because the hotel had issue what are you going to do about it nothing right so this is manual also can be taken care of a lot of us believe that you know these systems have to be extremely complex like one of the things that i i recently learned from a professor at cornell actually for data is you're saying that you can go to 95 with probably five percent of the effort and the last five percent which is a lot of intelligence just let a human handle that you have a security guard in your building for that reason you know you can have a complicated machine which is going to ask people its name and all that just take a cctv camera 95 of the problem is solved five percent is remaining you can put a human being there so yes okay uh this this i think is a good point okay any projects that are going on open source which can contribute uh okay uh is golang good for coding led solutions that is not currently based i think we can skip language specific questions how do we ensure concurrency while booking this we have we are going to get to for the system design you teach is it a concept for same cloud and networking design i i don't know what this means uh yes most of the designs we talk about are cloud based uh love to see make my trip bus reservation system with automatic seat reservation instead of user seat selection front windows seat high priority etc okay okay so your a priority based uh booking system does not seem much more complicated than what we have actually ours seems more complicated because you have concurrency over there when the system is booking it's not going to have any concurrency so that seems easier but it's an interesting idea how to ensure system is extensible to train tickets as well in future i think we don't have to make any changes the train is extremely similar only thing is the train goes to multiple destinations so the same train can be used for multiple um you know bookings um our ctc design is something we are working on right now but yeah otherwise everything is the same thank you for the session can you design database also no low level design we are not going to be talking about the database side of things actually yeah so the designing database comes high level which database do you need to use you know what sort of calls it would be this is not low level this is high level and for that you can check out playlist that's really helpful okay thank you uh yeah you sure can you can watch it on interview ready for free ad free and with awesome quizzes and everything so yeah this uh let me actually plug that in uh https dot io yes that's the place to learn low level design and also machine coding is over there so that's useful if makemytrip and booking.com both are booking same room yeah this has been handled same room is booked offline uh hey thank you for the session yeah uh how does lld differ for a senior software engineering role versus an sd one or two rule what are the factors that a sse should focus on more okay yeah yeah so uh like you said the first of all the requirements increases complexity of the question increases so like you said uh first 95 percent of the question is done in five minutes and then later on five percent of the question is done in last 95 minutes so so this is what happens there are few more complex requirements which ssc will have to handle for example concurrency uh let's say would not be asked from sd1 or sc2 but it will definitely be asked from a senior software engineer time complexity for example uh like we have taken in the class diagram we took a list of flights for storing the flights if you see which could be uh now the system would be fetching flights so it will have to iterate on this complete list which is time taking of course now a senior software engineer could be asked to optimize on you know this time a system should not take this much time but whereas an sd1 or an sd2 might not be asked this question to optimize that much on time or dab that much on space yeah okay brilliant actually yeah that's two very important parameters the first one that you mentioned was uh concurrency the second one was efficiency and maybe if there is something uh then that would be latency uh similar to efficiency but you know one person should not wait for 10 seconds or 20 seconds how do you make sure most requests go through are you while reducing latency can you also improve on throughput usually they are a trade-off so very interesting yeah makes total sense awesome okay i think the rest of the questions are are things that will be answered while we are working on the code so um yeah i'll just uh oh wow okay i wasn't sharing my screen also okay uh sorry for that uh i don't you want to share your screen i'll just add it to the stream okay yeah this is clean and nice okay would you like to zoom in a bit uh i think my poor eyes it's got this presentation mode i think so maybe you yeah i don't know how to increase the point of it might be this thing you if you go to  view right it's got uh it's got appearance is it no uh presentation mode i think that that is one thing that works out yeah it's much much better much clearer and bigger although you won't have a file access but because you are coding in only one file this is good yeah right okay so now just before we start i wanted to say that uh guys uh it's been 1 hour 15 minutes in a real interview arun would not be so kind explaining every single thing he's doing so it would probably take him much less time to draw things out and just go ahead and explain things right as an interviewer also i would be rushing him a bit but we are not doing that because we want you to understand everything and then you can not just watch it right now live and ask your doubts but also watch it at 2x later on when you're done so that's the reason why we're going slow cool yeah okay should we start quara sure yes okay so i'll be taking help of the class diagram which we had built before this okay so now for the first thing was the system so let's make the class i think uh this is becoming an inner class uh yeah it is becoming an inner class so i'm just writing everything uh in this one plus and just for simplicity but this obviously would be different different files yeah you can you can probably uh i mean i don't know if you want to just make it a class system uh which will not look good would they say yeah should we just go ahead and write it yeah in fact can you press ctrl z once more and yeah this public class system let's put it outside as a separate class and just remove the public part of it okay yeah so this will be uh under it or over it yeah it doesn't really matter okay let's remove public yeah this is this yeah so uh before going ahead uh i would like to tell everyone that there's no barrier on the language of course people can use any language uh be in java javascript c plus plus uh any language you're comfortable in this is mostly pseudocode because people generally don't have that much time left to write each and every function so some of the functions could be pseudo code just write the signature of it and need not to define it okay right right yeah so uh okay let's go ahead and start with system so it will have a list of flights yeah so you're referring to the class diagram okay yes yes so now if you can see there's a red mark shown because we haven't uh really made class flight right now that's why it's showing uh red uh when we'll make flight this red mark would go okay uh now like we had discussed in the beginning we were making the system class as a singleton class so the way to make a singleton class is system constructor is always public so i'm not defining constructor uh we can leave it for now then for a singleton class there needs to be a get instance function this if somebody is not aware of it just go and read singleton's design pattern you'll get to know it's very simple what would be the return type it would be system again okay so what do we do is if system equals equals none then we need to make a new system and then we'll just return system okay so this is first now the constructor part is done second is uh if you see in the class diagram uh the second thing was fetch flights so we'll be able to make this function public return type would be like now what we are given is we were given a source okay let's import this if we can okay there is a date class already yeah okay now what we can do is we need to just filter the flights which you want from these flights right so uh let's make a list which will have light let's name it filtered flights okay yeah right so what we can do is we can iterate on this list and you know fetch accordingly so so i don't you want to actually uh code the flight class because it's it's basically coming out everywhere so indicator that you know coding so what we can do is we can just class flight you can see all the red marks are gone and it is showing us a red mark on this because we haven't imported that plus i've just imported list and we are free of all the reds right yeah oh okay yeah now it compiles so uh like we can see in the class diagram of flight was having a date a source and a destination this is all a class diagram that we are simply able to straight away write the code so if flight dot will say date uh we can have it public equals equals this date and and f of flight dot uh let's say source sql source and then flight dot destination then i think we need to pick this flight and put it into the list by dot add okay now if you see i haven't defined the flight uh which is having source destination and date uh once we give it uh these red marks would go now if you see we are also able to see a red mark here because we haven't returned so if we just return filtered flights yeah all the red marks are gone and this is how our id actually helps so if you can use any ide during an interview that would be awesome so what you can do is you can straight away just ask the interviewer uh but the interviewer would not give that much importance to these red marks actually but if it is there it would definitely help make sense in fact you can probably just uh you know with that option and you can create fields also just looking at those red lines yes yes yes so if you see we it cannot resolve date it is just showing me the option to create a field date in the flight and this is done same goes for click on source and you'll get this option destination nothing like it here yeah this is like github co-pilot you know just today i was um watching a candidate using github co-pilot and i was like yeah you should you should i mean if you if you uh an interview are going iterating over a list of flights that you have okay of course you can optimize this using hash map and stuff like that but we are focusing primarily on the structure of the class and how things are happening yes second function if you see uh in the class diagram was if i remember correctly it was i can also see it was fixed okay so the return type was boolean what you are getting is an aircraft now again it will show a red mark because we haven't defined the class aircraft which we will now and of course we are getting a seat the seat will also give us a red mark because we haven't defined the class see but let's define it no we don't want a destination package let's define it right below see the red mug went away and one more okay this also went away so we were having uh seats in the airport if we see in the class diagram so aircraft dot xc and what we do is rip and see it was having a customer right i'm just reading through the questions also at the same time so i'm i'm just seeing if there any interesting questions from the audience in the slider link so yeah all these are i'm just writing the basic functions uh which have been already talked about uh during the class diagram okay third one would be add flight which admin was able to do what we'll get is a flight flight and just add it to the list okay of lights and return true so yeah we can skip this method uh this is like let's assume that lights exist i mean every admin function let's just get rid of it because um yeah it means which admin was able to do fully so what how we can handle it is we'll first get a list of all the seats okay right so aircraft was having a list of all the seats right and a flight has an instance of an aircraft so yeah in fact this thing also i mean i i get where you're you're coming from you're saying that you know what if a flight is cancelled we have to get all the seats in that flight and then cancel them so yes let us assume that this is rather straightforward whatever is happening on the on the admin side of things uh we can get rid of okay we are focusing mainly on cancelling seat or fixing a seat and stuff like that okay okay so i think the system class is then done uh because in the class diagram also we took care of all these things uh let's complete our flight class now these are the three things which are required above but we can so date is there source is there destination is there we didn't add an aircraft so let's add it again how am i doing it uh just by looking at the class diagram it was having a start time and an end time so public time let's say start time i think we will have to import time class just import it okay so now the again uh i'm imagining that there's a constructor available and getters and setters for all of them are already there okay okay so just and we'll pass in the arguments what would be the arguments of course date would be their social with their destination would be there everything would be there okay okay right uh second thing we see was cancel for a customer what we got was a customer now like you know uh every flight has a instance of aircraft right and aircraft will have an instance of seats so like above we were doing it here we'll again fetch it here iterate we can nitrate on the seeds and we can cancel it okay so for this is how we iterate on a map right okay now if my let's say the seat dot get customer is equals equals my current customer then what we can do is this customer can be set to null and is booked field which we have can just be straight away set to 0 because now the seat is no more available to that customer and could be sold again so dot in fact you need some sort of mapping of you know which customer has which see so for that i right now i'm just hydrated over the seats uh and i thought of it why because an aircraft will have a limited number of seats only uh you know 50 600 that would not take much time uh by the system i so in a flight do you want to keep a list of seats is that how you would go about so i have put it in the aircraft actually aircraft is having a list of seats okay so forever okay uh but we can have a list of seats in the flight also but yeah that's a great point yeah okay so uh these all things if i see the class diagram uh a flight was able to do a flight plan uh we can straightaway move to the aircraft class now yeah if you see the class diagram two more classes are left uh aircraft and a c class right so like we discussed in the class diagram it is having a map of seeds right okay okay then of course uh constructor i'm imagining is there right aircraft was able to fix the seat what it will get is a seed s let's say and a customer c okay so s dot set customer just that's it and we can return true of course now if you have got an array of seats let's say you've got six seeds so you can iterate on all the seeds and then you can fix it okay so you're setting a customer basically your seeds got put yes you put this customer now the next one was uh if you want to add a few seats into the aircraft so for that so so seed classes left now right this is almost like an enough i think yeah yes so first of all we can provide an enum see [Music] every time okay and maybe just system two so that the concept is clear uh normal okay luxury seats you get grapes on type then of course it yeah here's the thing do we want to keep the customer mapping here a seat will always belong to a customer only not necessarily what if it's empty so if it's empty then we can put it null okay so what we are doing now is we are storing customer information that mapping of which customer has or rather this seed belongs to which customer if i ever need to ask the seat that uh i don't think that is happening i don't think at any point in time i'll be asking the seat who's your customer we always have an idea who the customer for a particular seat is i mean actually so actually why i use this is uh in a plane uh suppose you're checking out a flight right so in that flight uh if you see the system requirement you mentioned that uh we should be able to see which seats are already booked and which seats are left so that people only click on those seats right correct so for that for that i am uh having a customer here customer field here uh that you know when i would be iterating on all the seats i would be showing a certain different color for the seats which are booked and you know that's a good idea yeah that probably solves that problem yes so and last one okay uh let's keep it priced there's someone who's asking an interesting question uh can we have a map of customer to seat uh to take care of that problem so but yeah we can have multiple solutions to the same problem let's just go ahead with this now which makes sense oh your price also for that seat okay so this is per flight okay the seat person so yeah so i feel these are the things which uh seat class was having and of course there would be getters and setters for all of them which we have imagined right uh two more classes are left which is class user customer and uh admin class should we go ahead and make it admin class we can make it let's ignore it because we are not really getting into the depth of it uh which other class we talking about uh first one was the user class which was extended by the customer class let us also ignore it because we have spoken at a high level what it's going to be doing it's going to be extracting those you know data uh members so let's let's ignore that let's just assume there's one type of user okay so should i go ahead and write the customer class or because other than that everything is done oh okay yeah let's just write the customer class because it's like pretty critical okay so and then all the compilers go away and be deployed to prod immediately yeah so of course it will have let's give it id just for now and let's give it just emails do we need uh anything else no right no i think it will have a instance of system of course okay do we really need the instance of system also so uh of course our customer is able to book the tickets he's able to see uh so he will make a call to the system right uh to the aps exposed by the system right so yeah that's that's my idea so that's why there's a concept there's this concept of a class object also so maybe the system can be if everything in it is static then there is only one object that will be created for that system and all its members can also be data members can also be static functions can also be static so it becomes just one thing so it becomes a singleton that way yes yes i think you are uh you're explaining the point of what is a singleton quite well so that's why you are making sure that it is okay yes true so of course i'm imagining constructor is there so what were the two things that a customer was able to do it he was able to fix the seat okay okay what will it do uh for fixing a seat he will select a flight and then he would tap on a seat right so these two would be the data members like we had already discussed in the class diagram right and of course he can go ahead uh and you know fix so let's say so because he is having an instance of flight and flight will give us aircraft and in the aircraft we'll have uh we already have a function fix c which will take a seat and of course the customer is this only okay yeah this clarifies things and return true okay okay now second thing is cancel the booking okay yeah i think the six seat came out really uh using this only i'll show you how that problem of concurrency will also be solved just give me a moment everyone's doubt should be clear right also for cancelling the book in flight okay so we just need to call the function again it was flight dot cams why is this uh oh in there what about concurrency here so now if you see like we discussed uh suppose there could be other issues also there could be something at the server going on server might perhaps crash or whatever issue could come why am i taking boolean or why am i returning boolean right here like i said in the beginning we can return a boolean right here uh if somebody has a risk somebody see see this boom we would show congratulations and somebody see this notebook we can go and ask him and show him whatever message we want to show right so if you see this fixed seat function here is a boolean right and we are returning true over here suppose we return false which will do if the seat is not booked in that case we'll handle it in a separate way so what we can do is boolean let's name a variable is booked if the now suppose if the flight is booked we can return true here else we can return false okay now front end can use this data true or false to show what they want to show uh a success or a failure okay but this is how we generally solve concurrency uh because in my trip also i've seen this that when i was trying to book a plane ticket for a seat which i have selected now let's say i make uh it take me two or three minutes to fill my card details or to make payment and in that mean time somebody has already booked the ticket or somebody else's payment has been done so it would show me a failure so how this failure is shown this would come as false to me and then accordingly front end can handle so when you say fixed seat it will return a true or a false let's go to fix it that method how does it know whether the seat has been booked so here also we'll have to do uh the same thing we are setting the set customer over here right and just said customer uh we can put it as a boolean variable so inside customer will first check if it is right now null or not so before setting the customer if s dot get customer is not equal to null which means somebody else is already fixed so we can return false otherwise we can go ahead and set the customer do you see any race condition here what if threads come see get customer and you know say that oh okay customer is is none so let me go and send the customer so two people go ahead so how do you avoid that so what we can do is we can lock it so it's the same as the locking mechanism which we have but i think these questions would be asked if like people in the beginning asked now uh what would be the difference uh to a question that would be asked for senior software engineer and to a sd1 or hd2 this is the main difference now we are going into the depth of it like you said this condition senior software engineer will have to answer all of this uh i don't think these questions would be asked to somebody who is preparing for uh just fresh out of college or having two three four years of experience right that's that's right yeah you're looking at object uh definitions and uh breakdown of classes and uh primarily when it comes to st1 and sd2 okay so but like you answered it uh very clearly you either take a lock or you synchronize it you force some sort of locking in the method itself so you either lock on code through synchronize or you lock on the data type by taking a lock on the you know s which is the cs or finally you enforce ordering like you force them all to run in the same thread so these are the three methods that we have uh when it comes to booking one resource by multiple people at the same time so i think that takes care of almost all of the concurrency issues that you have there's just three solutions lock the code synchronized lock the data type which is a lock and otherwise you use ordering okay yeah problem solved the the question which got 32 upwards is now solved so yeah okay cool so yeah this this sells up i mean this this takes care of everything actually basically c dot set customer get customer do you want to uh just create that method so that you get rid of the compilers uh yeah why not yeah just let's uh it should be just a getter function yeah this is just a bit of getter right yeah you can use the id you can put input this is a function so it's going to turn into field x instead of function oh this has converted this to a public variable actually yeah because because there are no brackets to get customer uh in line number 66 oh yeah oh sorry yeah this this will now solve the problem okay and what you can do is return customer and the same this is the setup function right  okay and you pass in a customer wonderful maybe on line 88 you want to see if it is not much then you just hit on boolean uh and we'll set the customer yeah most of the compilers are taken care of okay this actually solves i think the whole question is solved we have a customer can make bookings can cancel bookings can view a set of lights the way it's able to do this is by using the system which gives it a set of lights given a source destination and date okay now also as a customer you can cancel a booking or reserve a booking and you're using the system again we did not go to admins because we didn't want to uh this is tedious and useless actually to talk about in an interview you can talk about it in the requirements but yeah not in the code uh so that's that's good okay there are a few questions which are there on the chat i'll just pick probably some interesting ones one of them uh two of them are similar sandeep and ganpati are both asking the same thing can we have a decorator pattern for seats and why did we tightly couple seat and customer won't you ideally have a wrapper around it so they don't want a direct reference of the seat to the customer uh can there be some sort of a mapping somewhere else or some sort of a class which is handling this mapping that's their question so in an interview of course this is it's it's easier to think in hindsight but yeah sorry no again i would say the same thing uh in an interview you do not have time that much you know optimize on stuff but what an interviewer looks from the top is if you are able to think right uh the main stuff was singleton if you are able to uh you know think of the singleton pattern over here you know but yeah uh for seats and for customer we can have this discussion uh go on and whatever there would be pros and cons for each and every everything makes sense so raghu and sandeep these are excellent pointers we just don't um we didn't have the let's say time to pick on this because like this this code can be improved a lot always that's always true for every interview even in prod that is code which can be improved so that's good okay um what's the rationale okay do we need to synchronize the method for selecting the ctr uh that has been discussed led also contains er diagram how are you going to normalize your database no i don't think led contains an er diagram is that is that a right assumption from my side do they ask for er diagrams also i mean you have made a class diagram it makes yeah which is similar to a ear diagram also because we discussed about relations we discussed about what a one too many many to one whatever relations we are having so i think the interviewer generally would get impressed by this only uh and of course if you notice how much time did you take to code like i was explaining but if you see using the class diagram since i had everything in the front and i was quickly able to write all the functions okay yeah that is that is true and in fact that saved you a lot of time and uh the thought you had to think once and code once instead of thinking 50 times and coding coming back and doing iterations because you had a class diagram because you had a use case diagram to create that class diagram it was a smooth flow and as an interviewer it was easy for me to understand okay there's there's this question can you make a structured course on lower level design and high level design i'll just share your link okay i don't know uh yeah here it is interviewer dot io just head there uh it's a very structured course on system design uh the benefits are it is condensed so all the information that you see is already available on youtube and blogs all of us know that but which information is useful so curating it what kind of information should you know condensing it and then how do you learn it in a structured organized way how do you go from a to z not p first and then q comes in and then z comes in and then there's a also a little bit structured so you can use this and i think one of the open codes you can use so let me just check which google chrome is working uh hello world this is a coupon code which is pretty good that will be a hello world design okay let's go for the highest reported again instead of the newest should booking be separate classes book c should be part of booking service and not customer service yes we can make a tower separate also yeah that's that's a good idea yeah okay that's a good idea anonymous that can be done how much of this is practical like a lot of things can be done but at what time so somebody has mentioned this also how do i know uh whether my solution is good enough not the best on the planet not something that luna star wars will say wow just give me that pull request how do you know that this is a good enough solution for an interview okay that's a great question actually so now if you see generally an interview is for one hour right and the interviewer is first of all we are not designing everything we are just speculating things right so uh here in one hour when we were making the class diagram and when we were deciding stuff there only generally the question answer thing happens with the interviewer and you generally answer it if the interviewer is having any issue generally those are cleared there and then right and then when you go ahead and write the code interviewer generally don't ask because if he would have had any problem he would have asked during the uh you know when you were making the class diagram so that's why what my assumption is it takes five to ten minutes while building the use case diagram because what you do is you just read the requirements system requirements which were given to you by the interviewer you go ahead and make the class diagram using the use case diagram which you have built and you can devote let's say 30 minutes in building the class diagram and there could be a number of discussions with you and your interviewer and then of course the last 15 to 20 minutes you can go ahead and write the code which we also took here right so generally we are not looking uh the interviewer also is not looking for you to make make my trip right here so that he can go ahead and use it no you cannot do that no there's another another question our bishop has asked an interesting question do you uh are you going to be running this code and you know making sure things are working no there's a difference between low level design and there's a difference between machine coding in machine coding yes you want the code to run and you want to discuss a lot on you know how is this going to work engineering wise here it's important to remember guys it's taken us up about 1 hour 15 minutes of course we are going slow for you but in the real world also it will take you because you see this question for the first time it will take you one hour so over there don't expect that you are going to create make my trip right there um expect that you will be having more discussions and the id will give you compile errors and if you don't use an id then it will look nice and clean but actually it doesn't work the code won't run so um in fact arun do you want to expand on that yeah so uh even here many like gaurav said uh don't look at the admin side of it this is what happens in the real interview also uh interview when he has asked all his questions when he's clear with what the flow would be when he's done he would not ask you to write all these functions for example uh if you if you would have seen i have written full full functions interval interviewer will never ask you to write fulfill functions for example you are just iterating on the list to fetch the flights he would not ask you and since you would not write it the code would not run it makes it so the most most of it is just like that only discussion exactly you don't have a constructor written how is this class going to the interviewer does not care they know that you can write a constructor that much they know after you have broken down things into classes and variables and you're talking about concurrency and everything so if you want to test that coding skills take a take a dynamic programming interview you know what you're doing with a little design interview so the intents are different uh you're coding you're testing nobody cares about that here uh much unless they are unreasonable um that is when they will go like no no show me everything build make my trip i'm sitting in front of you let's do this so okay now what do we have if i book multiple seats in two different transactions in the same flight don't we need booking ids to cancel those seats of particular transaction yeah we need a booking id  most likely uh actually you need a set of seats that you need to cancel we have assumed it's a single seat the fixed seat flight seat date shouldn't be considered date as well for the user is expecting to book on that date so we have a flight which has the date okay why cancel it okay okay taslima sheikh is asking do different services mobile application mobile browser computer website matter in terms of system design or is it only related to the ui component uh the back end of it i think what do you think so uh see we genuinely generally show a lot more content on a website which we can show on a mobile app right uh so definitely there are there is some difference in the mobile uh apis as well as the you know uh website apis or you know uh but of course the website apis can be used for mobile apis also but why would you want to send more response when you are only using very less so generally we make separate apis but yeah of course they can be used okay dude you uh tell in the api it says that uh hey you know my user agent is mobile or my uh um yeah i mean that that would be one way to handle it or you can say it paginated like give me just the first five results instead of 500 so that would also probably work yeah that would come in system requirements only yeah exactly yeah there's also this question which is very similar to that how do i know before designing the architecture of the application what are the prerequisites for it what are the kinds of requirements that are expected to know before designing i think just go to the start of this video and watch our own breakdown requirements it clearly it's a clear explanation of how you can do this right so that yeah would it be better to have a booking class or keep light to sleep okay we have talked about this also uh make a structured course on low level design and high level design yes for that where was the where's the plug yes and you have hello and uh do try it out okay so this is also handled um do we have different devices this is uh krishna what is the standard time you'll be using for booking international i don't really know that's a product question uh like if someone book flight and they want to change uh the date of flight how will this happen uh just cancel just cancel and report it that's what happens in the real world also i mean you should drive enough light sometime you guys will see or even booking a train or cancelling a train they are so simple in their system they're like okay i'll do it for you there's a human talking to you right i'll do it for you they cancel it and then they're like okay now make a payment the refund will come to you later and i'll charge you some extra fee for as a service or something so it's that simple uh cost of flight booking yes we mentioned this will be there in the booking maybe in the seat uh but ideally it will be in a flight booking so this is taken care of uh can you make a structured course yeah that's that's also taken care of so all slider questions handled awesome we spoke about the system design problem for a really long time two full hours so hopefully it was useful to you guys and it was a very well structured breakdown of the problem from requirements to use this diagram to a class diagram to finally code uh so thank you so much aaron for doing this and thank you for you know coming here and making this happen giving us your time and so much effort any any you know last words before we before we book a flight or something yeah first of all thank you so much for inviting it was a great discussion and this is generally the strategy which i follow and i love sharing the strategy i hope people get their interviews cleared and they should give me something i hope so but yeah great desperation in fact you uh you know you are available on linkedin um if you want you can share your uh i think i'll add your you know linkedin profile in the in the description if you want to connect with arun around system design or low level design please feel free arun and i are also working on something uh which is quite interesting it's around low level design so hopefully that will be out sometime soon if you want notifications on that just go up to your interview really sign up um and we'll you know when it's ready we'll send you a mailer of course we'll also make announcements on every possible platform buying the drums so thank you so much for coming thank you for spending two hours guys this has been amazing you have been a very patient audience and i am seeing that all of you are still here uh brilliant amazing thank you and we'll continue making low-level design videos for you we continue discussing different topics so if you are interested in that please feel free to subscribe until next time then see you bye bye see ya